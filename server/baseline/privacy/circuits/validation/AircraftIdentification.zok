// 7. AIRCRAFT IDENTIFICATION
// Not exceeding 7 characters and not including hyphens or symbols

from "../types" import AircraftIdentifer
import "utils/casts/u8_to_field" as u8_to_field
import "utils/casts/u32_to_field" as u32_to_field
import "utils/casts/field_to_u32" as field_to_u32

const u32[7] evenIndices = [0, 2, 4, 6, 8, 10, 12]
const u32[7] oddIndices = [1, 3, 5, 7, 9, 11, 13]

// Sorted Nationality Codes as ASCII (in DEC format)
const u32[165] NC_2 = [5165, 5166, 5167, 5168, 5188, 5275, 5276, 5279, 5282, 5287, 5288, 5365, 5366, 5372, 5378, 5382, 5384, 5385, 5386, 5387, 5388, 5389, 5479, 5489, 5579, 5580, 5584, 5680, 5681, 5682, 5765, 5771, 5772, 5774, 5775, 5776, 5777, 5778, 5781, 5785, 5786, 5789, 6550, 6551, 6553, 6554, 6555, 6556, 6580, 6750, 6753, 6754, 6757, 6767, 6778, 6780, 6785, 6788, 6850, 6852, 6854, 6881, 6951, 6953, 6955, 6967, 6975, 6980, 6982, 6983, 6984, 6987, 6988, 6989, 6990, 7252, 7265, 7267, 7272, 7273, 7276, 7280, 7282, 7283, 7290, 7450, 7451, 7453, 7454, 7455, 7456, 7465, 7485, 7489, 7678, 7688, 7689, 7690, 7966, 7968, 7969, 7972, 7975, 7977, 7979, 7989, 8050, 8052, 8072, 8074, 8075, 8090, 8265, 8280, 8350, 8353, 8355, 8357, 8369, 8380, 8384, 8385, 8388, 8455, 8456, 8467, 8470, 8471, 8473, 8474, 8476, 8478, 8482, 8483, 8484, 8485, 8489, 8490, 8575, 8578, 8582, 8650, 8651, 8652, 8653, 8654, 8655, 8656, 8672, 8684, 8884, 8885, 8886, 8965, 8973, 8974, 8975, 8976, 8978, 8982, 8983, 8985, 8986, 9051, 9080]
const u32[5] NC_3 = [528966, 558189, 578882, 655248, 655767]
const u32[9] NC_4 = [82688076, 86804565, 86804567, 86804570, 86804571, 86804576, 86804577, 86814572, 86814584]

def charsAsASCIIu8<N>(u8[N] chars) -> u32:
    field res = 0
    for u32 i in 0..N do
        field char = u8_to_field(chars[i])
        res = res + char * 10 ** (N - i - 1)
    endfor
    u32 u32Res = field_to_u32(res)
    return u32Res

def charsAsASCIIu32<N>(u32[N] chars) -> u32:
    field res = 0
    for u32 i in 0..N do
        field char = u32_to_field(chars[i])
        res = res + char * 10 ** (N - i - 1)
    endfor
    u32 u32Res = field_to_u32(res)
    return u32Res

def hasSpaces<N>(u8[N] chars) -> bool:
    for u32 i in 0..N do
        u8 c1_1 = chars[evenIndices[i]]
        u8 c1_2 = chars[oddIndices[i]]
        u8 c2_1 = chars[evenIndices[i+1]]
        u8 c2_2 = chars[oddIndices[i+1]]
        u32 char1 = charsAsASCIIu8([c1_1, c1_2])
        u32 char2 = charsAsASCIIu8([c1_1, c1_2])
        bool hasSpace = !(char1 == 32 && char2 != 32) ? false : true
        assert(hasSpace == false)
    endfor
    return false


def validAircraftIdentifer(AircraftIdentifer AI) -> bool:
    //Check if the aircraft identifier is only, capital letters, integers, and spaces (to account for blanks at the end of the aircraft idenfifier)
    for u32 i in 0..7 do
        u8 c1 = AI[evenIndices[i]]
        u8 c2 = AI[oddIndices[i]]
        u32 char = charsAsASCIIu8([c1, c2])
        bool isCapital = char >= 65 && char <= 90
        bool isInteger = char >= 48 && char <= 57
        bool isSpace = char == 32
        assert(isCapital || isInteger || isSpace)
    endfor

    //Check if first 2, 3, or 4, letters are a nationality code
    bool hasNationalityCode = false
    u32 nationalityCodeLength = 0
    for u32 i in 0..165 do
        hasNationalityCode = charsAsASCIIu8(AI[0..4]) == NC_2[i] ? true : hasNationalityCode
        nationalityCodeLength = hasNationalityCode == false ? 0 : 2
    endfor
    for u32 i in 0..15 do
        hasNationalityCode = charsAsASCIIu8(AI[0..6]) == NC_3[i] ? true : hasNationalityCode
        nationalityCodeLength = hasNationalityCode == false ? 0 : 3
    endfor
    for u32 i in 0..9 do
        hasNationalityCode = charsAsASCIIu8(AI[0..8]) == NC_4[i] ? true : hasNationalityCode
        nationalityCodeLength = hasNationalityCode == false ? 0 : 4
    endfor
    assert(hasNationalityCode == true)

    //Check if letters (registration mark) is not separated by spaces
    assert(!hasSpaces(AI))
    
    // if nationaltyCodeLength == 2 then
    //     u32[10] RM = AI[4..14]
    //     assert(!hasSpaces(RM))
    // if nationaltyCodeLength == 3 then
    //     u32[10] RM = AI[6..14]
    //     assert(!hasSpaces(RM))
    // if nationaltyCodeLength == 4 then
    //     u32[10] RM = AI[8..14]
    //     assert(!hasSpaces(RM))
    return true