
// SPDX-License-Identifier: AML
// 
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// 2019 OKIMS

pragma solidity ^0.8.0;
import "./Pairing.sol";

contract ACKVerifier {

    using Pairing for *;

    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[13] IC;
    }

    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(uint256(3894132797570069501018176605724044912543572101692738379885208297987914427998), uint256(1975616074744916711135698192841039312605134603802395644379899848837111539458));
        vk.beta2 = Pairing.G2Point([uint256(15729785120194383145386294598008301549023943783224542357175421409887473211797), uint256(10605663497997576057327434167745925110442150075758994900457659697026943071170)], [uint256(7755508996755093763520054530992528320389745075084096366744861710083644040298), uint256(4240375313686442704383805159193178875066002712822804063326362089536084128785)]);
        vk.gamma2 = Pairing.G2Point([uint256(8717352516594949552067217689760314014655783546343953387121335141202746841220), uint256(21745948098723512258706584328993750656233111628064481024141076687404502446482)], [uint256(20484271688225721359695630315432942753632964106466182559248899660871036784540), uint256(20358687507325487425001340499594836641122681647794047635317871736520004259245)]);
        vk.delta2 = Pairing.G2Point([uint256(20192007995108280110672651956214119620953928537866441781523403080884265914274), uint256(18540933622961681128936720104594627409999179408580196332160952476423220016832)], [uint256(6037545688305442914714249172785178956386459772586917666800811799938404049637), uint256(21593909800898550886574685955932955140147281124841236111027636376244534859382)]);   
        vk.IC[0] = Pairing.G1Point(uint256(6892146801171866658527173506720251312141708668575852996669527859802272612745), uint256(8109667402745484052923832402875422198511644926358906986706772274560508613118));   
        vk.IC[1] = Pairing.G1Point(uint256(16438053304634902672919497131787918389840225374766995106677596626863122309244), uint256(14924746182528029811016023967130922027706330594607708478128929238889786303200));   
        vk.IC[2] = Pairing.G1Point(uint256(19949897365877410645684545721137253084396474691201156618029454218631000916164), uint256(7602705832568688666895386702161601312906481695085867240033295474352194564929));   
        vk.IC[3] = Pairing.G1Point(uint256(4837313571776756201820321024153256622101112849396324370937297561176134349075), uint256(11057927374930360164631855829282708716104208716029788237302470489954163712091));   
        vk.IC[4] = Pairing.G1Point(uint256(9083823318871965962015209127064020739415267435576016132644704125607539296498), uint256(5930740272081296264317729517696547805033166190104987573121751299331421826660));   
        vk.IC[5] = Pairing.G1Point(uint256(14831637196052799979183302131311695969122515943209217931021656853087907061583), uint256(3695465768403671261240281723946628105175460990767038144448469836332510484304));   
        vk.IC[6] = Pairing.G1Point(uint256(4888458411197887428808113828327628976049576721096084406481931726872963967697), uint256(14925215390223848988320266909758745431664864562298952904054159303128966195806));   
        vk.IC[7] = Pairing.G1Point(uint256(17353863694236929483599914924475829898717999101339322480415666067555523874229), uint256(12439273075041074145368312839328201287790572042826818733335869596776827724572));   
        vk.IC[8] = Pairing.G1Point(uint256(20590870614768680906444343422802645043399579916896896708034728155725741413800), uint256(17492838937999683762095280091902947112927859933278676285729632902952452089892));   
        vk.IC[9] = Pairing.G1Point(uint256(21530356906331236430735504360649927541117734738069763625379167754681012516130), uint256(4719769382981476295651784662631949578044932149709193337586503124135194244114));   
        vk.IC[10] = Pairing.G1Point(uint256(5398690402489126745516081992445342165518379541780886917692326755904081807162), uint256(15535053991119367386947288188677671541344333124927902263791961803629487437801));   
        vk.IC[11] = Pairing.G1Point(uint256(5535044698237176839658882381408684237873592406246321351707911286427553548976), uint256(17653040365206600921473420074723524377471924244892878211481155761755106246768));   
        vk.IC[12] = Pairing.G1Point(uint256(4391998359349115166301777774324285436156167346026859572421414688204638204274), uint256(15726600935105005272802735796360719715556067391105064024602639069726123174068));
    }
    
    /*
     * @returns Whether the proof is valid given the hardcoded verifying key
     *          above and the public inputs
     */
    function verifyProof(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[12] memory input
    ) public view returns (bool r) {

        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);

        VerifyingKey memory vk = verifyingKey();

        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);

        // Make sure that proof.A, B, and C are each less than the prime q
        require(proof.A.X < PRIME_Q, "verifier-aX-gte-prime-q");
        require(proof.A.Y < PRIME_Q, "verifier-aY-gte-prime-q");

        require(proof.B.X[0] < PRIME_Q, "verifier-bX0-gte-prime-q");
        require(proof.B.Y[0] < PRIME_Q, "verifier-bY0-gte-prime-q");

        require(proof.B.X[1] < PRIME_Q, "verifier-bX1-gte-prime-q");
        require(proof.B.Y[1] < PRIME_Q, "verifier-bY1-gte-prime-q");

        require(proof.C.X < PRIME_Q, "verifier-cX-gte-prime-q");
        require(proof.C.Y < PRIME_Q, "verifier-cY-gte-prime-q");

        // Make sure that every input is less than the snark scalar field
        for (uint256 i = 0; i < input.length; i++) {
            require(input[i] < SNARK_SCALAR_FIELD,"verifier-gte-snark-scalar-field");
            vk_x = Pairing.plus(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }

        vk_x = Pairing.plus(vk_x, vk.IC[0]);

        return Pairing.pairing(
            Pairing.negate(proof.A),
            proof.B,
            vk.alfa1,
            vk.beta2,
            vk_x,
            vk.gamma2,
            proof.C,
            vk.delta2
        );
    }
}
